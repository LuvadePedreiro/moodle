{
    "title": "@078 L2 - Jogo do Avesso",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@078 L2 - Jogo do Avesso</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmpdsides8h.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l2---jogo-do-avesso-vetores\"><span class=\"citation\" data-cites=\"078\">@078</span> L2 - Jogo do Avesso #vetores</h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/moodle/master/base/078/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>A brincadeira do avesso funciona assim.</p>\n<p>Tem um chefe e os oper\u00e1rios.<br />\nOs oper\u00e1rios ficam em fila.<br />\nO chefe diz o nome de um oper\u00e1rio e os dois oper\u00e1rios que estavam perto dele tem que trocar de posi\u00e7\u00e3o.<br />\nSe estavam em p\u00e9, ficam agachados e vice-versa.</p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Suponha a seguinte configura\u00e7\u00e3o onde cada n\u00famero<br />\nrepresenta uma pessoa.</p>\n<p>[3 4 8 9 1 5 6]<br />\nO chefe grita \u201c4\u201d, ent\u00e3o o \u201c3\u201d e o \u201c8\u201d se agacham.<br />\nO vetor fica assim:<br />\n[-3 4 -8 9 1 5 6]<br />\nUsando o sinal negativo para representar o agachado.<br />\nDepois o chefe grita \u201c9\u201d. O -8 e o 1 se alteram ficando<br />\nassim:<br />\n[-3 4 8 9 -1 5 6]<br />\nO 8 volta ao normal e o 1 se agacha.</p>\n<p>Considere que nunca existem duas pessoas com o mesmo n\u00famero no vetor.<br />\nSe o chefe disser um n\u00famero errado, ningu\u00e9m deve se mexer.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>a quantidade de casos de teste.</li>\n<li>Para cada caso teste:<br />\n* O tamanho do vetor de oper\u00e1rios (N &lt; 100) e o grito do chefe (0 &lt; X &lt; 100).<br />\n* O vetor de oper\u00e1rios, um valor inteiro para cada elemento (0 &lt; 100).</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Vetor resultante.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n1\n2 3\n3 1\n========\n[3 -1]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n1\n2 3\n2 1\n========\n[2 1]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n1\n2 1\n4 1\n========\n[-4 1]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3\n3 1\n4 1 5\n3 5\n4 1 5\n3 4\n4 1 5\n========\n[-4 1 -5]\n[4 -1 5]\n[4 -1 5]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3\n7 0\n3 4 8 9 1 5 6\n7 4\n3 4 8 9 1 5 6\n7 9\n3 4 -8 9 1 5 6\n========\n[3 4 8 9 1 5 6]\n[-3 4 -8 9 1 5 6]\n[3 4 8 9 -1 5 6]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h3 id=\"ajuda\">Ajuda</h3>\n<p>Essas quest\u00f5es modelo maratona normalmente envolvem executar v\u00e1rias vezes o mesmo problema em um \u00fanico caso de teste. Minha sugest\u00e3o \u00e9 que voc\u00ea separe a execu\u00e7\u00e3o do problema em fun\u00e7\u00f5es. Voc\u00ea pode utilizar o modelo abaixo em todas as quest\u00f5es do tipo.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> avesso(){</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> tam = <span class=\"dv\">0</span>, grito = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    scanf(<span class=\"st\">&quot;%d%d&quot;</span>, &amp;tam, &amp;grito);</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> vetor[tam];</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span>(<span class=\"dt\">int</span> i = <span class=\"dv\">0</span>; i &lt; tam; i++) <span class=\"co\">//ler vetor</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        scanf(<span class=\"st\">&quot;%d&quot;</span>, &amp;vetor[i]);</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    inverter(vetor, tam, grito); <span class=\"co\">//inverte os vizinhos do grito</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    mostrar(vetor, tam); <span class=\"co\">//mostra o vetor</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main(){    </span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> qte = <span class=\"dv\">0</span>;</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    scanf(<span class=\"st\">&quot;%d&quot;</span>, &amp;qte);</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span>(<span class=\"dt\">int</span> i = <span class=\"dv\">0</span>; i &lt; qte; i++){</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        avesso(); <span class=\"co\">//resolvendo o problema de uma inst\u00e2ncia</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n</body>\n</html>\n",
    "executionFiles": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "case=\ninput=1\n2 3\n3 1\noutput=\"[3 -1]\n\"\ngrade reduction=100%\n\ncase=\ninput=1\n2 3\n2 1\noutput=\"[2 1]\n\"\ngrade reduction=100%\n\ncase=\ninput=1\n2 1\n4 1\noutput=\"[-4 1]\n\"\ngrade reduction=100%\n\ncase=\ninput=3\n3 1\n4 1 5\n3 5\n4 1 5\n3 4\n4 1 5\noutput=\"[-4 1 -5]\n[4 -1 5]\n[4 -1 5]\n\"\ngrade reduction=100%\n\ncase=\ninput=3\n7 0\n3 4 8 9 1 5 6\n7 4\n3 4 8 9 1 5 6\n7 9\n3 4 -8 9 1 5 6\noutput=\"[3 4 8 9 1 5 6]\n[-3 4 -8 9 1 5 6]\n[3 4 8 9 -1 5 6]\n\"\ngrade reduction=100%\n",
            "encoding": 0
        }
    ],
    "requiredFile": null,
    "keep_size": 0
}
